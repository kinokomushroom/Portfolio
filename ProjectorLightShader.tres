[gd_resource type="VisualShader" load_steps=10 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=75]
uniform_name = "Video"
texture_type = 1
color_default = 1

[sub_resource type="VisualShaderNodeExpression" id=76]
size = Vector2( 642, 434.8 )
expression = "float y_max = -uv.y * 0.5 + 1.0;
float y_min = uv.y * 0.5;
float uv_x = (uv.x - y_min) / (y_max - y_min);
uv_1 = vec3(uv_x, 0.1, 0.0);
uv_2 = vec3(uv_x, 0.5, 0.0);
uv_3 = vec3(uv_x, 0.9, 0.0);
float region = float(uv.x < y_max) * float(uv.x > y_min);
float x_gradient = pow(max(0.0, 1.0 - (abs(uv_x - 0.5) * 2.0)), 0.5);
float y_gradient = pow(uv.y, 1.5);
float y_cut = float(uv.y < y_cutoff);
alpha = region * y_gradient * x_gradient * y_cut * brightness;"

[sub_resource type="VisualShaderNodeTexture" id=77]
source = 5

[sub_resource type="VisualShaderNodeTexture" id=78]
source = 5

[sub_resource type="VisualShaderNodeTexture" id=79]
source = 5

[sub_resource type="VisualShaderNodeExpression" id=80]
size = Vector2( 564, 400 )
expression = "average = (texture_1 + texture_2 + texture_3) / 3.0 * alpha;"

[sub_resource type="VisualShaderNodeScalarUniform" id=81]
uniform_name = "brightness"

[sub_resource type="VisualShaderNodeInput" id=82]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarUniform" id=83]
uniform_name = "y_cutoff"

[resource]
resource_local_to_scene = true
code = "shader_type canvas_item;
render_mode blend_add;

uniform float brightness;
uniform float y_cutoff;
uniform sampler2D Video : hint_black_albedo;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// ScalarUniform:19
	float n_out19p0 = brightness;

// ScalarUniform:20
	float n_out20p0 = y_cutoff;

// Expression:12
	float n_out12p0;
	vec3 n_out12p1;
	vec3 n_out12p2;
	vec3 n_out12p3;
	n_out12p0 = 0.0;
	n_out12p1 = vec3(0.0, 0.0, 0.0);
	n_out12p2 = vec3(0.0, 0.0, 0.0);
	n_out12p3 = vec3(0.0, 0.0, 0.0);
	{
		float y_max = -n_out2p0.y * 0.5 + 1.0;
		float y_min = n_out2p0.y * 0.5;
		float uv_x = (n_out2p0.x - y_min) / (y_max - y_min);
		n_out12p1 = vec3(uv_x, 0.1, 0.0);
		n_out12p2 = vec3(uv_x, 0.5, 0.0);
		n_out12p3 = vec3(uv_x, 0.9, 0.0);
		float region = float(n_out2p0.x < y_max) * float(n_out2p0.x > y_min);
		float x_gradient = pow(max(0.0, 1.0 - (abs(uv_x - 0.5) * 2.0)), 0.5);
		float y_gradient = pow(n_out2p0.y, 1.5);
		float y_cut = float(n_out2p0.y < n_out20p0);
		n_out12p0 = region * y_gradient * x_gradient * y_cut * n_out19p0;
	}

// Texture:15
	vec3 n_out15p0;
	float n_out15p1;
	{
		vec4 Video_tex_read = texture(Video, n_out12p1.xy);
		n_out15p0 = Video_tex_read.rgb;
		n_out15p1 = Video_tex_read.a;
	}

// Texture:16
	vec3 n_out16p0;
	float n_out16p1;
	{
		vec4 Video_tex_read = texture(Video, n_out12p2.xy);
		n_out16p0 = Video_tex_read.rgb;
		n_out16p1 = Video_tex_read.a;
	}

// Texture:17
	vec3 n_out17p0;
	float n_out17p1;
	{
		vec4 Video_tex_read = texture(Video, n_out12p3.xy);
		n_out17p0 = Video_tex_read.rgb;
		n_out17p1 = Video_tex_read.a;
	}

// Expression:18
	vec3 n_out18p0;
	n_out18p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out18p0 = (n_out15p0 + n_out16p0 + n_out17p0) / 3.0 * n_out12p0;
	}

// Output:0
	COLOR.rgb = n_out18p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -317, 82.8 )
mode = 1
modes/blend = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1400, 120 )
nodes/fragment/2/node = SubResource( 82 )
nodes/fragment/2/position = Vector2( -540, 240 )
nodes/fragment/11/node = SubResource( 75 )
nodes/fragment/11/position = Vector2( 180, -20 )
nodes/fragment/12/node = SubResource( 76 )
nodes/fragment/12/position = Vector2( -260, 220 )
nodes/fragment/12/size = Vector2( 642, 434.8 )
nodes/fragment/12/input_ports = "0,1,uv;1,0,brightness;2,0,y_cutoff;"
nodes/fragment/12/output_ports = "0,0,alpha;1,1,uv_1;2,1,uv_2;3,1,uv_3;"
nodes/fragment/12/expression = "float y_max = -uv.y * 0.5 + 1.0;
float y_min = uv.y * 0.5;
float uv_x = (uv.x - y_min) / (y_max - y_min);
uv_1 = vec3(uv_x, 0.1, 0.0);
uv_2 = vec3(uv_x, 0.5, 0.0);
uv_3 = vec3(uv_x, 0.9, 0.0);
float region = float(uv.x < y_max) * float(uv.x > y_min);
float x_gradient = pow(max(0.0, 1.0 - (abs(uv_x - 0.5) * 2.0)), 0.5);
float y_gradient = pow(uv.y, 1.5);
float y_cut = float(uv.y < y_cutoff);
alpha = region * y_gradient * x_gradient * y_cut * brightness;"
nodes/fragment/15/node = SubResource( 77 )
nodes/fragment/15/position = Vector2( 480, 60 )
nodes/fragment/16/node = SubResource( 78 )
nodes/fragment/16/position = Vector2( 480, 200 )
nodes/fragment/17/node = SubResource( 79 )
nodes/fragment/17/position = Vector2( 480, 340 )
nodes/fragment/18/node = SubResource( 80 )
nodes/fragment/18/position = Vector2( 700, 80 )
nodes/fragment/18/size = Vector2( 564, 400 )
nodes/fragment/18/input_ports = "0,1,texture_1;1,1,texture_2;2,1,texture_3;3,0,alpha;"
nodes/fragment/18/output_ports = "0,1,average;"
nodes/fragment/18/expression = "average = (texture_1 + texture_2 + texture_3) / 3.0 * alpha;"
nodes/fragment/19/node = SubResource( 81 )
nodes/fragment/19/position = Vector2( -540, 60 )
nodes/fragment/20/node = SubResource( 83 )
nodes/fragment/20/position = Vector2( -540, 140 )
nodes/fragment/connections = PoolIntArray( 2, 0, 12, 0, 11, 2, 15, 2, 12, 1, 15, 0, 12, 2, 16, 0, 12, 3, 17, 0, 11, 2, 16, 2, 11, 2, 17, 2, 15, 0, 18, 0, 16, 0, 18, 1, 17, 0, 18, 2, 12, 0, 18, 3, 20, 0, 12, 2, 19, 0, 12, 1, 18, 0, 0, 0 )
